{"version":3,"sources":["App.js","serviceWorker.js","Nav.js","index.js"],"names":["App","useState","isDrawing","setIsDrawing","currentColor","setColor","startDrawing","keepDrawing","e","preventDefault","target","style","backgroundColor","stopDrawing","cells","x","push","className","key","onMouseDown","onMouseMove","onMouseUp","controls","color","id","onClick","changeColor","Boolean","window","location","hostname","match","Nav","href","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"kQAoDeA,MAjDf,WA0BE,IA1Bc,IAAD,EAEqBC,oBAAS,GAF9B,mBAENC,EAFM,KAEKC,EAFL,OAGoBF,mBAAS,SAH7B,mBAGNG,EAHM,KAGQC,EAHR,KAMPC,EAAe,WACnBH,GAAa,IAGTI,EAAc,SAACC,GACnBA,EAAEC,iBACEP,IACFM,EAAEE,OAAOC,MAAMC,gBAAkBR,IAI/BS,EAAc,WAClBV,GAAa,IAOTW,EAAQ,GACLC,EAAI,EAAGA,EAAI,KAAMA,IACxBD,EAAME,KAAK,yBAAKC,UAAU,OAAOC,IAAKH,EAAGI,YAAcb,EAAec,YAAcb,EAAec,UAAYR,KAKjH,IAFA,IACMS,EAAW,GA/BJ,aAgCR,IAAIC,EAAK,KACZD,EAASN,KAAK,4BAAQQ,GAAID,EAAON,UAAWM,EAAOL,IAAKK,EAAOE,QAAS,kBAZtD,SAACF,GACnBlB,EAASkB,GAWqEG,CAAYH,KAASA,KADrG,MAFe,CAAC,QAAS,MAAO,SAAU,SAAU,QAAS,OAAQ,SAAU,SAE/E,eAA2B,IAI3B,OACE,yBAAKN,UAAU,OACb,yBAAKA,UAAU,WACb,yBAAKO,GAAG,OACN,kDACA,yBAAKP,UAAU,WAAYK,GAC3B,yBAAKE,GAAG,OAAOV,OCjCLa,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DChBN,IAQeC,EARH,WACV,OACE,yBAAKf,UAAU,QACb,4BAAI,uBAAGgB,KAAK,+BAAR,mBCEVC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,MACA,kBAAC,EAAD,OAEFC,SAASC,eAAe,SFuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.915bdc1c.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport './App.css';\n\nfunction App() {\n\n  const [isDrawing, setIsDrawing] = useState(false);\n  const [currentColor, setColor] = useState(\"black\");\n\n\n  const startDrawing = () => {\n    setIsDrawing(true);\n  } \n\n  const keepDrawing = (e) => {\n    e.preventDefault();\n    if (isDrawing) {\n      e.target.style.backgroundColor = currentColor;\n    }\n  }\n\n  const stopDrawing = () => {\n    setIsDrawing(false);\n  }\n\n  const changeColor = (color) => {\n    setColor(color);\n  }\n\n  const cells = [];\n  for (let x = 0; x < 3990; x++) {\n    cells.push(<div className=\"cell\" key={x} onMouseDown={ startDrawing } onMouseMove={ keepDrawing }  onMouseUp={ stopDrawing }></div>)\n  }\n\n  const colors = ['white', 'red', 'orange', 'yellow', 'green', 'blue', 'purple', 'black'];\n  const controls = [];\n  for (let color of colors) {\n    controls.push(<button id={color} className={color} key={color} onClick={() => changeColor(color)}>{color}</button>);\n  }\n\n  return (\n    <div className=\"App\">\n      <div className=\"wrapper\">\n        <div id=\"pad\">\n          <h1>Sketchpad in React</h1>\n          <div className=\"buttons\" >{controls}</div>\n          <div id=\"pad\">{cells}</div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\n\nconst Nav = () => {\n  return (\n    <div className=\"menu\">\n      <h3><a href=\"https://l-hunter.github.io/\">Laura Hunter</a></h3>\n    </div>\n  )\n}\n\nexport default Nav;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport Nav from './Nav';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Nav />\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}